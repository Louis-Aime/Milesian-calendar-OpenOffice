<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DateParse" script:language="StarBasic">REM  *****  BASIC  *****

Attribute VB_Name = &quot;DateParse&quot;
&apos;DateParse.
&apos;Copyright Miletus SARL 2018. www.calendriermilesien.org
&apos;For use as an MS Excel VBA module.
&apos;Developped under Excel 2016
&apos;Tested under MS Excel 2007 (Windows) and 2016 (Windows and MacOS)
&apos;No warranty of conformance to business objectives
&apos;Neither resale, neither transmission, neither compilation nor integration in other modules
&apos;are permitted without authorisation
&apos;DATE_PARSE, applied to any Date-Time expression as a string, returns the corresponding Excel Date series number.
&apos;This module uses MilesianCalendar
&apos;Do not apply to an Excel formatted date between 1 Jan and 29 Feb 1900. Hint: force input to Text format.
&apos;Version of this module: M2018-02-10

Const InvArgMsg = &quot;Err :502&quot;	&apos;Error message displayed in place of function result, for non-typed functions (already defined in Milesian)

Function DATE_PARSE(TheCell As String) &apos;A String is converted into a Numeric that corresponds to a Date
Attribute DATE_PARSE.VB_Description = &quot;Extract date and time value from string. Standard or Milesian expression. Earliest is Greg. 1/1/100. Fix bug for Date-time expressions before 1900.&quot;
&apos;TheCell holds a valid string for a date, either in milesian, either in a specific calendar,
&apos;or in the standard calendar (gregorian).
&apos;TheCell is supposed a numeric date string. It shall not work with months expressed by their names.
&apos;Summary:
&apos;   1. Prepare, convert all in uppercase, trim
&apos;   2. Extract calendar indication when available.
&apos;   3. Extract Time part, store in T
&apos;   4. Split Date part into minimum 2 elements
&apos;   5. Find Month element after its pattern (&quot;M&quot; month marker)
&apos;   6. Find Year element, of provide present year
&apos;   7. Find Day element of provide &quot;1&quot; by default, return
&apos;   Note: authorised delimiters are &quot;./-&quot;. Comma is dropped. m of Milesian month is recognised. Other lead to error.
&apos;   If as first character: canvas is yyy/mm/dd or similar, even M-yyy-mm-dd is possible.
&apos;   If not as first, find and extract &quot;m&quot;, compute d, m and year elements, call MILESIAN_DATE.
On Error Goto ErrorHandler
&apos;1. Prepare: Convert string to Uppercase and drop blanks in excess
Dim Elem, I    &apos;Elem: the array of elements of TheCell when splitted, I: a standard index
Dim T As Double, Y, M, D    &apos;The date elements
Dim Yindex, Mindex, Dindex    &apos;Index of year, month and day in Elem, -1 means &quot;unknown&quot;
Dim Delimiters      &apos;The list of possible delimiters (outside &quot; &quot;)
Delimiters = Array(&quot;/&quot;, &quot;.&quot;, &quot;-&quot;)

Y = 0	&apos;We need Y to be initialized
TheCell = Trim(TheCell) &apos;Suppress all leading and trailing blank
TheCell = UCase(TheCell) &apos;All uppercase
&apos;In Open Office: Drop initial &quot;&apos;&quot;
If Left(TheCell, 1) = &quot;&apos;&quot; Then TheCell = Right(TheCell, Len(TheCell)-1)
TheCell = Replace(TheCell, &quot;, &quot;, &quot; &quot;)    &apos;Drop comma followed by blank (which is authorised)
Elem = Split(TheCell)   &apos;Split with &quot; &quot;
TheCell = &quot;&quot;            &apos;Reconstruct TheCell
For I = LBound(Elem) To UBound(Elem)
    If Len(Elem(I)) &gt; 0 Then TheCell = TheCell &amp; Switch(Len(TheCell) = 0, &quot;&quot;, Len(TheCell) &gt; 0, &quot; &quot;) &amp; Elem(I)
    Next I

&apos;2. Did the user specify the calendar with the first character ?
&apos;Implementation note: it is possible to add other tags here, e.g. &quot;J&quot; for julian calendar.

Dim K As String     &apos;Calendar code, First letter of TheCell if it is a letter
Select Case Left(TheCell, 1)
    Case &quot;M&quot;
        K = &quot;M&quot;     &apos;At least, year in first place, month without &quot;m&quot; in second place
        Yindex = 0
        Mindex = 1
        Dindex = -1 &apos;Day may be not present, to be checked later
    Case &quot;0&quot; To &quot;9&quot;   &apos;First character is one figure. Minus sign cannot be the first character if no letter is encountered.
        K = &quot;D&quot; &apos;Not specified, default, order is not known
        Yindex = -1
        Mindex = -1
        Dindex = -1
    &apos;Other calendar could come here as other case tags
    Case Else
        K = &quot;U&quot; &apos;Specified but unknown
    End Select
If K &lt;&gt; &quot;D&quot; Then TheCell = Right(TheCell, Len(TheCell) - 1) &apos;Drop the first character from TheCell

&apos;3. Extract Time element. This is necessary here since DateValue ignores the time part.
Elem = Split(TheCell)   &apos;Split again, knowing that there is no empty element
&apos;Check whether last element contains &quot;:&quot;, if yes it is the &quot;time&quot; part, else no time part.
If InStr(Elem(UBound(Elem)), &quot;:&quot;) &gt; 0 Then    &apos;Last elements holds a time string
    T = TimeValue(Elem(UBound(Elem)))
    &apos;Drop Time value from TheCell and re-compute Elem
    TheCell = &quot;&quot;
    For I = LBound(Elem) To UBound(Elem) - 1
        If Len(Elem(I)) &gt; 0 Then TheCell = TheCell &amp; Switch(Len(TheCell) = 0, &quot;&quot;, Len(TheCell) &gt; 0, &quot; &quot;) &amp; Elem(I)
        Next I
    Elem = Split(TheCell, &quot; &quot;, 4)
Else
    T = TimeValue(&quot;00:00:00&quot;)
End If
&apos;Here T holds the time part, TheCell holds the date part, Elem holds a possible detailed decomposition.
    
&apos;4. Extract Date elements, whichever the separator is
&apos;4.1 To begin with, solve case where significant cell begins with &quot;-&quot; and consider this first part as year.
If Left(TheCell,1) = &quot;-&quot; Then
	If K=&quot;D&quot; Then Goto ErrorHandler	&apos;No &quot;free&quot; date string shall begin with a minus sign !! 
	&apos; From here we know that ther was a letter before the minus sign, so this sign is for the year only.
	Yindex = 0			&apos;Year found
	Y = Val(TheCell)	&apos;Year value (negative) is first part of TheCell
	TheCell = Right(TheCell, Len(TheCell) - 1)	&apos;Drop initial &quot;-&quot; which is not a separator
End If
&apos;Extract remaining part
I = UBound(Elem)
Do While UBound(Elem) = LBound(Elem) And I &lt;= UBound(Delimiters) &apos;only one element?  Try other delimiters
  Elem = Split(TheCell, Delimiters(I), 3)
  I = I + 1
  Loop
If UBound(Elem) = LBound(Elem) Then Goto ErrorHandler  &apos;We did not find how to split
If Y &lt; 0 Then Elem(Yindex) = Y	&apos;Meanwhile we found the year, a negative value
	
&apos;5. Check whether one element, and only one, is a milesian month notation:
&apos;Search elements looking like &quot;1M&quot; to &quot;12M&quot;, as long as there is no other indication
For I = LBound(Elem) To UBound(Elem)    &apos;Examine each element
  If Right(Elem(I), 1) = &quot;M&quot; And ((Val(Elem(I)) &gt; 0 And Val(Elem(I)) &lt; 10 And Len(Elem(I)) = 2) Or ((Val(Elem(I)) &gt;= 10 And Val(Elem(I)) &lt;= 12 And Len(Elem(I)) = 3))) Then &apos;A Milesian month
    If K = &quot;D&quot; Then &apos;Calendar still not defined
        K = &quot;M&quot; &apos;Milesian calendar
        Mindex = I  &apos;This is the month&apos;s index
        Elem(I) = Left(Elem(I), Len(Elem(I)) - 1) &apos;Set this element to a pure number
       Else
        Goto ErrorHandler     &apos;Only one month indication authorised
       End If
     End If
  Next I

&apos;6. Search for year element: three (numeric) character. whether first or last element, or non-existent
&apos;Note: this part is not valid if we authorise month names, for other calendars
If Yindex = -1 Then &apos;Year still not found
  For I = LBound(Elem) To UBound(Elem)    &apos;Examine each element
    If Len(Elem(I)) &gt;= 3 And IsNumeric(Elem(I)) Then    &apos;This can represent a year
        If Yindex = I Or Yindex = -1 Then   &apos;Year field recognised
            Yindex = I
          Else                              &apos;Only one year field authorised
            Goto ErrorHandler
          End If
      End If
    Next I
  If K = &quot;M&quot; And Yindex = -1 And UBound(Elem) = 2 Then Goto ErrorHandler &apos;No 2-char year authorised in Milesian notation
End If

&apos;7. Find whether there is a Day indication, make last computations and return
Select Case K
    Case &quot;D&quot;	&apos;If default format date is specified with a negative year, register as such
   		Dim Olymp as Long, Y1 As Long, D1 As Long &apos;New variables for this section
    	If Yindex &gt; -1 and Val(Elem(Yindex)) &lt; 4 Then &apos;Since there is an error with 01/01/0001
    		Select Case UBound(Elem)	&apos;How many elements ? 
    			Case 1	&apos;Two elements, year is known, other element is month
					Mindex = (Yindex+1) Mod 2
				Case 2	&apos;Three elements, order is either Y-M-D or D-M-Y, else error (this is a non-US version)
					Mindex = 1	&apos;In the middle. Or to be determined from the Locale.
					Dindex = Switch (Yindex=0, 2, Yindex=2, 0)
				End Select
			If Dindex &gt; -1 Then
            	If IsNumeric(Elem(Dindex)) Then
           			D = Val(Elem(Dindex))
	            Else
	                Goto ErrorHandler
	            End If
			Else
				D = 1
			End If
    		Milesian_IntegDiv Val(Elem(Yindex))-4, 4, Olymp, Y1
    		Y1 = Y1 + 4
    		D1 = DateValue(D &amp; &quot;/&quot; &amp; Elem(Mindex) &amp; &quot;/&quot; &amp; &quot;00&quot; &amp; Y1)	&apos;Computed a shifted date as a long integer
    		D1 = D1 + 1461*Olymp
    		DATE_PARSE = D1 + T
    	Else
    		D1 = DateValue(TheCell) &apos;Force conversion of the date to a number
        	DATE_PARSE = D1 + T    &apos; Return always a Double
        End If	
    Case &quot;M&quot;    &apos;At this level, Mindex is known  (&gt;-1). Find and check other elements.
        If Mindex &gt; 1 Then Goto ErrorHandler  &apos;Month may never be indicated as 3rd element
        M = Val(Elem(Mindex))
        If Yindex = -1 Then &apos;Year is not specified, provide with today&apos;s date
            Y = MILESIAN_YEAR(Date) &apos;Today&apos;s date
        Else
            Y = Val(Elem(Yindex))
        End If
        &apos;Find place of day or set default day
        I = LBound(Elem)
        Do While Dindex = -1 And I &lt;= UBound(Elem)
            If I &lt;&gt; Yindex And I &lt;&gt; Mindex Then Dindex = I  &apos;Found
            I = I + 1
        Loop
        If Dindex &gt; -1 Then &apos;D found
            If IsNumeric(Elem(Dindex)) Then
                D = Val(Elem(Dindex))
            Else
                Goto ErrorHandler
            End If
        Else    &apos;D was not specified
            D = 1
        End If
        DATE_PARSE = MILESIAN_DATE(Y, M, D) + T
    Case Else
        Goto ErrorHandler
    End Select
  Exit Function
ErrorHandler:
	DATE_PARSE = InvArgMsg
End Function
</script:module>